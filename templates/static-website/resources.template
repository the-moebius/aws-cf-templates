
AWSTemplateFormatVersion: "2010-09-09"

Description: A stack for static website hosting using S3 + Cloudfront

Parameters:
  Environment:
    Description: Name of the execution environment
    Type: String
    AllowedValues:
      - stage
      - prod

  TechZoneName:
    Description: A name of a zone where the website should be hosted (without trailing dot)
    Type: String

  PublicZoneName:
    Description: A name of a zone where the website should be hosted (without trailing dot) [optional]
    Type: String

  PublicDomainName:
    Description: A public domain name (without trailing dot) [optional]
    Type: String

  CertificateId:
    Description: An identifier for wildcard certificate in "us-east-1" region that covers the specified hosted zone
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Common Settings"
        Parameters:
          - Environment
          - CertificateId
          - TechZoneName
      - Label:
          default: "Public Domain Name (optional)"
        Parameters:
          - PublicZoneName
          - PublicDomainName

Conditions:
  IsStage: !Equals [!Ref Environment, stage]
  IsProd: !Equals [!Ref Environment, prod]
  ShouldUsePublicDomain: !And
    - !Condition IsProd
    - !Not [!Equals [!Ref PublicZoneName, ""]]
    - !Not [!Equals [!Ref PublicDomainName, ""]]

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}"
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Action:
              - s3:GetObject

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        PriceClass: PriceClass_All
        Origins:
          - Id: S3BucketOrigin
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
        DefaultCacheBehavior:
          TargetOriginId: S3BucketOrigin
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 3600 # 1 hour
          MinTTL: 60 # 1 minute
          MaxTTL: 86400 # 1 day
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
        Aliases:
          - !Sub "${AWS::StackName}.${TechZoneName}"
          - !If
            - IsProd
            - !Ref PublicDomainName
            - !Ref AWS::NoValue
        ViewerCertificate:
          AcmCertificateArn: !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${CertificateId}
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016

  TechDnsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      HostedZoneName: !Sub ${TechZoneName}.
      Name: !Sub "${AWS::StackName}.${TechZoneName}"
      Comment: !Sub "CloudFront distribution alias for \"${AWS::StackName}\" bucket"
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        # Using a global ZoneId for CloudFront from documentation
        HostedZoneId: Z2FDTNDATAQYW2

  PublicDnsRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: IsProd
    Properties:
      Type: A
      HostedZoneName: !Sub ${PublicZoneName}.
      Name: !Ref PublicDomainName
      Comment: !Sub "CloudFront distribution alias for \"${AWS::StackName}\" bucket"
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        # Using a global ZoneId for CloudFront from documentation
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  BucketName:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket

  DistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution

  DistributionDomainName:
    Description: Cloudfront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName

  TechDomainUrl:
    Description: Website URL using technical domain name
    Value: !Sub "https://${AWS::StackName}.${TechZoneName}"

  PublicDomainUrl:
    Description: Public website URL
    Value: !Sub "https://${PublicDomainName}"
